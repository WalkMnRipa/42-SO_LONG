
Telechargement de la MLX: https://github.com/42Paris/minilibx-linux

Bibliotheque de png: https://www.vhv.rs/

Resize un png: https://onlinepngtools.com/resize-png

Convertion en xpm: https://anyconv.com/fr/convertisseur-de-png-en-xpm/

Guide pour l'utilisation de la minilib: https://aurelienbrabant.fr/blog

Man des prototypes de fonctions de la MLX: https://qst0.github.io/ft_libgfx/man_mlx_new_image.html


┌─────────────────────────────────────────────────────────────────────────┐
│                     SO_LONG - STRUCTURE DU PROJET                       │
└─────────────────────────────────────────────────────────────────────────┘

1. 📁 INITIALISATION DU PROJET GRAPHIQUE
   ┌───────────────────────────────────────────────────────────────────────
   │ 🔧 A. Configurer Makefile
   │    • Flags MiniLibX : -lmlx -lXext -lX11
   │    • Chemins headers MiniLibX
   │
   │ 📄 B. Mettre à jour so_long.h
   │    • Headers MiniLibX
   │    • Constantes : WINDOW_WIDTH, WINDOW_HEIGHT, SPRITE_SIZE
   │    • Structures : t_game, t_map, t_player, t_textures
   └───────────────────────────────────────────────────────────────────────

2. 🖥️ INITIALISATION FENÊTRE ET RESSOURCES
   ┌───────────────────────────────────────────────────────────────────────
   │ 🔲 A. init_window(t_game *game)
   │    • Initialiser connexion MiniLibX
   │    • Créer fenêtre du jeu
   │
   │ 🖼️ B. load_textures(t_game *game)
   │    • Charger XPM : joueur, mur, collectible, sortie
   │    • Stocker pointeurs d'image dans t_game
   └───────────────────────────────────────────────────────────────────────

3. 🔄 BOUCLE DE JEU PRINCIPALE
   ┌───────────────────────────────────────────────────────────────────────
   │ 🎮 game_loop(t_game *game)
   │    • Mettre à jour état du jeu
   │    • Appeler fonction de rendu
   └───────────────────────────────────────────────────────────────────────

4. 🎨 FONCTIONS DE RENDU
   ┌───────────────────────────────────────────────────────────────────────
   │ 🗺️ A. draw_map(t_game *game)
   │    • Parcourir t_map
   │    • Dessiner chaque élément
   │
   │ 🧍 B. draw_player(t_game *game)
   │    • Dessiner joueur à sa position
   │
   │ 🔢 C. draw_movement_count(t_game *game)
   │    • Afficher nombre de mouvements
   └───────────────────────────────────────────────────────────────────────

5. 🎛️ GESTION DES ÉVÉNEMENTS
   ┌───────────────────────────────────────────────────────────────────────
   │ ⌨️ A. key_press(int keycode, t_game *game)
   │    • W, A, S, D : mouvement joueur
   │    • ESC : quitter jeu
   │
   │ 🚪 B. close_window(t_game *game)
   │    • Fermer proprement le jeu
   └───────────────────────────────────────────────────────────────────────

6. 🧠 LOGIQUE DE JEU
   ┌───────────────────────────────────────────────────────────────────────
   │ 🏃 A. move_player(t_game *game, int dx, int dy)
   │    • Vérifier validité du mouvement
   │    • Mettre à jour position joueur
   │    • Incrémenter compteur mouvements
   │
   │ 💎 B. check_collectibles(t_game *game)
   │    • Vérifier si sur collectible
   │    • Mettre à jour nombre collectibles
   │
   │ 🚪 C. check_exit(t_game *game)
   │    • Vérifier conditions de sortie
   │    • Terminer jeu si conditions remplies
   └───────────────────────────────────────────────────────────────────────

7. 🧹 NETTOYAGE ET GESTION MÉMOIRE
   ┌───────────────────────────────────────────────────────────────────────
   │ 🗑️ clean_up(t_game *game)
   │    • Libérer images, fenêtre, connexion MiniLibX
   └───────────────────────────────────────────────────────────────────────

8. 🚀 FONCTION MAIN
   ┌───────────────────────────────────────────────────────────────────────
   │ A. Vérifier arguments et carte
   │ B. Initialiser fenêtre et ressources
   │ C. Configurer hooks d'événements
   │ D. Lancer boucle de jeu
   └───────────────────────────────────────────────────────────────────────


# 📋 So_long Project Todo List

## 🐞 Debugging
- [ ] 🔍 Effectuer un contrôle des fuites mémoire avec Valgrind
  - Exécuter le programme avec différentes cartes
  - Analyser et corriger toutes les fuites détectées

## 🎨 Graphiques
- [ ] 🖌️ Modifier les couleurs de fond des images
  - Déterminer une nouvelle palette de couleurs cohérente
  - Mettre à jour chaque image du jeu (joueur, murs, collectibles, etc.)
  - Vérifier la cohérence visuelle après les modifications

## ⏱️ Fonctionnalités supplémentaires
- [ ] ⏳ Ajout d'un plafond de deplacements max, le nombre de deplacement diminue a chaque mouvement

## 🧪 Tests
- [ ] 🔬 Créer des tests pour les nouvelles fonctionnalités
- [ ] 🔁 Effectuer des tests de régression pour s'assurer que les modifications n'ont pas introduit de nouveaux bugs

## 📚 Documentation
- [ ] 📝 Mettre à jour la documentation du projet avec les nouvelles fonctionnalités
- [ ] 🔄 Réviser le README.md pour inclure les instructions sur les nouvelles fonctionnalités